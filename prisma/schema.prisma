// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

generator js {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity", "interactiveTransactions", "fullTextSearch", "fullTextIndex"]
}

model Audit {
  id Int @id @default(autoincrement())

  timestamp  DateTime
  subject    String
  action     String
  objectType String
  objectId   Int
  message    String

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId Int
}

model Organization {
  id Int @id @default(autoincrement())

  name           String  @db.VarChar(64)
  completedSetup Boolean

  audits  Audit[]
  wallets Wallet[]
  users   OrganizationToUser[]
}

model User {
  username               String               @id @db.VarChar(64)
  email                  String               @unique
  firstName              String               @db.VarChar(64)
  lastName               String               @db.VarChar(64)
  passwordHash           String
  lastFailedLoginAttempt DateTime?
  failedLoginAttempts    Int                  @default(0)
  reviewedTransactions   Transaction[]        @relation("ReviewedTransactions")
  createdTransactions    Transaction[]        @relation("CreatedTransactions")
  organizations          OrganizationToUser[]

  @@fulltext([username, email, firstName, lastName])
}

model OrganizationToUser {
  role           String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId Int
  user           User         @relation(fields: [username], references: [username])
  username       String

  @@id([organizationId, username])
}

model Wallet {
  id               Int           @id @default(autoincrement())
  name             String        @db.VarChar(64)
  balance          Decimal       @default(0)
  transactionCount Int           @default(0)
  organization     Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId   Int
  transactions     Transaction[]
}

enum TransactionState {
  Pending
  Approved
  Rejected
}

model Transaction {
  id Int

  wallet           Wallet           @relation(fields: [walletId], references: [id], onDelete: Cascade)
  walletId         Int
  entryDateTime    DateTime
  spendDateTime    DateTime
  transactionValue Decimal
  notes            String
  state            TransactionState @default(Pending)

  creator          User   @relation("CreatedTransactions", fields: [creatorUsername], references: [username])
  creatorUsername  String
  reviewer         User   @relation("ReviewedTransactions", fields: [reviewerUsername], references: [username])
  reviewerUsername String

  @@id([id, walletId])
}
